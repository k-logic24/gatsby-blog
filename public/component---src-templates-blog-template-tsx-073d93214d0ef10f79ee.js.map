{"version":3,"sources":["webpack:///./src/templates/blog-template.tsx"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","className","itemScope","itemType","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"2FAAA,0HAiEeA,UAzDmD,SAAC,GAG7D,QAFJC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,GAAY,UAAAF,EAAKG,YAAL,mBAAWC,oBAAX,eAAyBC,QAAzB,QACZC,EAAQN,EAAKO,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQR,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,2CAMJ,kBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,wBAAIK,MAAO,CAAEC,UAAW,SACrBL,EAAMM,KAAI,SAAAC,GAAQ,QACXR,GAAQ,UAAAQ,EAAKC,mBAAL,eAAkBT,SAAlB,UAA2BQ,EAAKE,cAAhC,aAA2B,EAAaC,MAEtD,OACE,wBAAIC,IAAKJ,EAAKE,OAAQC,MACpB,6BACEE,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,gCACE,4BACE,kBAAC,OAAD,CAAMC,GAAIR,EAAKE,OAAQC,KAAOM,SAAS,OACrC,0BAAMA,SAAS,YAAYjB,KAG/B,+BAAQQ,EAAKC,YAAaS,OAE5B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAaY,aAAeb,EAAKc,SAEhDL,SAAS,yBActB,IAAMM,EAAY","file":"component---src-templates-blog-template-tsx-073d93214d0ef10f79ee.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { PageProps } from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\n\nconst BlogIndex: React.FC<PageProps<GatsbyTypes.BlogPageQuery>> = ({\n  data,\n  location,\n}) => {\n  const siteTitle = data.site?.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>No posts...</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter?.title || post.fields?.slug\n\n          return (\n            <li key={post.fields!.slug!}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields!.slug!} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter!.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter!.description || post.excerpt!,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogPage($limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}