{"version":3,"sources":["webpack:///./node_modules/clsx/dist/clsx.m.js","webpack:///./src/components/atoms/tag-label.tsx","webpack:///./src/components/molecules/bio.tsx","webpack:///./src/components/organisms/footer.tsx","webpack:///./src/components/shared/image.tsx","webpack:///./src/components/organisms/cat.tsx","webpack:///./src/components/pages/Error/Main.tsx","webpack:///./src/pages/404.tsx","webpack:///./src/components/organisms/tag.tsx"],"names":["toVal","mix","k","y","str","Array","isArray","length","TagLabel","fieldValue","totalCount","variant","size","tmp","x","i","arguments","clsx","className","to","Bio","data","useStaticQuery","author","site","siteMetadata","social","avatar","childImageSharp","fixed","alt","name","imgStyle","borderRadius","href","twitter","target","rel","github","Footer","Date","getFullYear","Img","assetUrl","allImageSharp","fluid","nodes","find","n","originalName","Cat","catGroup","map","key","Main","title","useState","tagGroup","setTagGroup","setCatGroup","useEffect","allMarkdownRemark","isText","BlogIndex","Tag"],"mappings":"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","file":"component---src-pages-404-tsx-fc61f7b97143261f04c9.js","sourcesContent":["function toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (typeof mix === 'string' || typeof mix === 'number') {\n    str += mix;\n  } else if (typeof mix === 'object') {\n    if (Array.isArray(mix)) {\n      for (k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n          if (y = toVal(mix[k])) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else {\n      for (k in mix) {\n        if (mix[k]) {\n          str && (str += ' ');\n          str += k;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\nexport default function () {\n  var i = 0,\n      tmp,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (tmp = arguments[i++]) {\n      if (x = toVal(tmp)) {\n        str && (str += ' ');\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}","import React from 'react'\nimport { Link } from 'gatsby'\nimport clsx from 'clsx'\n\nimport { AppProps } from '@/types'\n\nconst TagLabel: React.FC<AppProps['taglabel']> = ({\n  fieldValue,\n  totalCount,\n  variant,\n}) => {\n  const size = clsx(\n    'post-tag',\n    variant === 'sm' && 'post-tag--sm',\n    variant === 'lg' && 'post-tag--lg'\n  )\n\n  return (\n    <Link className={size} to={`/tag/${fieldValue}`}>\n      {fieldValue}\n      {totalCount && <span className=\"inline-block ml-2\">({totalCount})</span>}\n    </Link>\n  )\n}\n\nexport default TagLabel\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nconst Bio: React.FC = () => {\n  const data = useStaticQuery<GatsbyTypes.BioQuery>(graphql`\n    query Bio {\n      avatar: file(absolutePath: { regex: \"/avatar.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50, quality: 95) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n          social {\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site?.siteMetadata?.author\n  const social = data.site?.siteMetadata?.social\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div className=\"flex\">\n      {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <ul className=\"bio-list\">\n          <li>\n            <a\n              className=\"bio-list__link anim-link\"\n              href={`https://twitter.com/${social?.twitter || ``}`}\n              target=\"_blank\"\n              rel=\"noopenner noreferrer\"\n            >\n              Twitter\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"bio-list__link anim-link\"\n              href={`https://github.com/${social?.github || ``}`}\n              target=\"_blank\"\n              rel=\"noopenner noreferrer\"\n            >\n              GitHub\n            </a>\n          </li>\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\n\nimport Bio from '@/components/molecules/bio'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-gray-light\">\n      <div className=\"py-4 flex justify-between container\">\n        <Bio />\n        <small className=\"self-end text-white\">\n          &copy; {new Date().getFullYear()} K.Iwata\n        </small>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\ninterface ImgProps {\n  assetUrl: string\n  alt: string\n}\n\nconst Img: React.FC<ImgProps> = ({ assetUrl, alt }) => {\n  const { allImageSharp } = useStaticQuery<GatsbyTypes.ImgQuery>(graphql`\n    query Img {\n      allImageSharp {\n        nodes {\n          fluid(maxWidth: 1600) {\n            originalName\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Image\n      fluid={\n        allImageSharp.nodes.find(n => n.fluid?.originalName === assetUrl)?.fluid\n      }\n      alt={alt}\n    />\n  )\n}\n\nexport default Img\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Img from '@/components/shared/image'\nimport { BlogCatGroupProps } from '@/types'\n\nconst Cat: React.FC<{ catGroup: BlogCatGroupProps }> = ({ catGroup }) => {\n  return (\n    <section className=\"text-center\">\n      <h1 className=\"pb-4 mb-10 section__ttl\">カテゴリー</h1>\n      <ul className=\"cat-list\">\n        {catGroup.map(({ fieldValue }) => (\n          <li key={fieldValue}>\n            <Link className=\"cat-list__link\" to={`/cat/${fieldValue}`}>\n              <figure className=\"cat-list__imgwrap\">\n                <Img assetUrl={`cat-${fieldValue}.jpg`} alt={``} />\n              </figure>\n              <p className=\"cat-list__txt\">{fieldValue}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Cat\n","import React, { useEffect, useState } from 'react'\n\nimport Header from '@/components/organisms/header'\nimport Footer from '@/components/organisms/footer'\nimport Fv from '@/components/organisms/fv'\nimport Seo from '@/components/shared/seo'\nimport Tag from '@/components/organisms/tag'\nimport Cat from '@/components/organisms/cat'\nimport { BlogIndexProps, BlogTagGroupProps, BlogCatGroupProps } from '@/types'\n\nconst Main: React.FC<BlogIndexProps> = ({ title, data }) => {\n  const [tagGroup, setTagGroup] = useState<BlogTagGroupProps | []>([])\n  const [catGroup, setCatGroup] = useState<BlogCatGroupProps | []>([])\n\n  useEffect(() => {\n    const { tagGroup, catGroup } = data.allMarkdownRemark\n    setTagGroup(tagGroup)\n    setCatGroup(catGroup)\n  }, [])\n\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <Fv title={title} isText={true} />\n      <main className=\"py-8 md:py-12 px-4 mx-auto max-w-screen-lg\">\n        <Seo title=\"404Page\" />\n        <div className=\"section home\">\n          <div className=\"section-wrap\">\n            <div className=\"text-center\">\n              <h1 className=\"pb-4 mb-10 section__ttl\">404: Not Found</h1>\n            </div>\n            <p className=\"text-center\">\n              Sorry. This Page is not Found.\n              <br />\n              Please check your request url.\n            </p>\n          </div>\n          <div className=\"section-wrap\">\n            <Tag tagGroup={tagGroup} />\n          </div>\n          <div className=\"section-wrap\">\n            <Cat catGroup={catGroup} />\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport { graphql, PageProps } from 'gatsby'\n\nimport Main from '@/components/pages/Error/Main'\n\nconst BlogIndex: React.FC<PageProps<GatsbyTypes.BlogIndexQuery>> = ({\n  data,\n}) => {\n  return <Main title=\"404 Not Found\" data={data} />\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query ErrorPage {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      catGroup: group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n      tagGroup: group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React from 'react'\n\nimport TagLabel from '@/components/atoms/tag-label'\nimport { BlogTagGroupProps } from '@/types'\n\nconst Tag: React.FC<{ tagGroup: BlogTagGroupProps }> = ({ tagGroup }) => {\n  return (\n    <div className=\"max-w-screen-md mx-auto px-4 py-8 bg-gray-tag dark:bg-white rounded-lg\">\n      <div className=\"text-center\">\n        <h1 className=\"pb-4 mb-10 text-gray section__ttl\">タグ</h1>\n      </div>\n      <ul className=\"tag-list\">\n        {tagGroup.map(({ fieldValue, totalCount }) => (\n          <li key={fieldValue}>\n            <TagLabel fieldValue={fieldValue!} totalCount={totalCount} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Tag\n"],"sourceRoot":""}