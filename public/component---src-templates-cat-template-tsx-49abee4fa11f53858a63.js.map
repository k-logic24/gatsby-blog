{"version":3,"sources":["webpack:///./src/components/pagination.tsx","webpack:///./src/templates/cat-template.tsx"],"names":["Pagination","isFirst","isLast","currentPage","type","pages","className","to","rel","icon","faChevronLeft","style","marginLeft","marginRight","faChevronRight","TagIndex","data","pageContext","catPosts","allMarkdownRemark","edges","catId","catPages","length","title","map","node","key","fields","slug","itemScope","itemType","itemProp","fluid","frontmatter","hero","childImageSharp","alt","date","tags","cat","index"],"mappings":"2FAAA,6DA4DeA,IAlDsC,SAAC,GAMhD,IALJC,EAKI,EALJA,QACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,KACAC,EACI,EADJA,MAEA,OACE,yBAAKC,UAAU,cACb,wBAAIA,UAAU,oBACVL,GACA,wBAAIK,UAAU,8BACZ,kBAAC,OAAD,CACEA,UAAU,mBACVC,GACkB,IAAhBJ,EAAA,IAAwBC,EAAxB,QAAsCA,EAAtC,KAA8CD,EAAe,GAE/DK,IAAI,QAEJ,kBAAC,IAAD,CACEC,KAAMC,IACNJ,UAAU,0BAEZ,0BAAMK,MAAO,CAAEC,WAAY,UAA3B,UAIN,wBAAIN,UAAU,YAAd,QACQH,EADR,MACwBE,IAEtBH,GACA,wBAAII,UAAU,8BACZ,kBAAC,OAAD,CACEC,GAAE,IAAMH,EAAN,KAAcD,EAAe,GAA7B,IACFG,UAAU,mBACVE,IAAI,QAEJ,0BAAMG,MAAO,CAAEE,YAAa,UAA5B,QACA,kBAAC,IAAD,CACEJ,KAAMK,IACNR,UAAU,gC,kCClD1B,qGA8FeS,UA5EX,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACLC,EAAWF,EAAKG,kBAAkBC,MAChCC,EAAkDJ,EAAlDI,MAAOpB,EAA2CgB,EAA3ChB,QAASC,EAAkCe,EAAlCf,OAAQC,EAA0Bc,EAA1Bd,YAAamB,EAAaL,EAAbK,SAE7C,OAAwB,IAApBJ,EAASK,OAET,kBAAC,IAAD,CAAQC,MAAK,SAAWH,GACtB,kBAAC,IAAD,CAAKG,MAAK,SAAWH,IACrB,2CAMJ,kBAAC,IAAD,CAAQG,MAAK,UAAYH,GACvB,kBAAC,IAAD,CAAKG,MAAK,UAAYH,IACtB,6BAASf,UAAU,gBACjB,yBAAKA,UAAU,eACb,wBAAIA,UAAU,2BAAd,UAAmDe,IAErD,wBAAIf,UAAU,aACXY,EAASO,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACZ,wBAAIC,IAAKD,EAAKE,OAAOC,MACnB,6BAASC,WAAS,EAACC,SAAS,6BAC1B,4BAAQzB,UAAU,uDAChB,kBAAC,OAAD,CACEC,GAAE,QAAUmB,EAAKE,OAAOC,KACxBvB,UAAU,mDACV0B,SAAS,OAET,kBAAC,IAAD,CACEC,MAAOP,EAAKQ,YAAYC,KAAKC,gBAAgBH,MAC7CI,IAAI,MAGR,uBAAG/B,UAAU,mBAAmBoB,EAAKQ,YAAYI,OAEnD,wBAAIhC,UAAU,kBACZ,kBAAC,OAAD,CACEC,GAAE,QAAUmB,EAAKE,OAAOC,KACxBG,SAAS,MACT1B,UAAU,6CAEV,0BAAM0B,SAAS,YAAYN,EAAKQ,YAAYV,SAGhD,yBAAKlB,UAAU,6BACZoB,EAAKQ,YAAYK,MAChBb,EAAKQ,YAAYK,KAAKd,KAAI,SAACe,EAAKC,GAAN,OACxB,kBAAC,OAAD,CACEnC,UAAU,8BACVC,GAAE,QAAUiC,EACZb,IAAKc,GAEJD,aAQjB,yBAAKlC,UAAU,iCACb,kBAAC,IAAD,CACEL,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,KAAI,MACJC,MAAOiB","file":"component---src-templates-cat-template-tsx-49abee4fa11f53858a63.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { AppProps } from '@/types'\n\nconst Pagination: React.FC<AppProps['pagination']> = ({\n  isFirst,\n  isLast,\n  currentPage,\n  type,\n  pages,\n}) => {\n  return (\n    <nav className=\"pagination\">\n      <ul className=\"pagination-list\">\n        {!isFirst && (\n          <li className=\"pagination-list__item prev\">\n            <Link\n              className=\"pagination__link\"\n              to={\n                currentPage === 2 ? `/${type}/` : `/${type}/${currentPage! - 1}`\n              }\n              rel=\"prev\"\n            >\n              <FontAwesomeIcon\n                icon={faChevronLeft}\n                className=\"pagination__icon prev\"\n              />\n              <span style={{ marginLeft: '0.5em' }}>Prev</span>\n            </Link>\n          </li>\n        )}\n        <li className=\"page-txt\">\n          page {currentPage} / {pages}\n        </li>\n        {!isLast && (\n          <li className=\"pagination-list__item next\">\n            <Link\n              to={`/${type}/${currentPage! + 1}/`}\n              className=\"pagination__link\"\n              rel=\"next\"\n            >\n              <span style={{ marginRight: '0.5em' }}>Next</span>\n              <FontAwesomeIcon\n                icon={faChevronRight}\n                className=\"pagination__icon next\"\n              />\n            </Link>\n          </li>\n        )}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Pagination\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\nimport Image from 'gatsby-image'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport Bio from '@/components/bio'\nimport Layout from '@/layouts/default'\nimport Seo from '@/components/seo'\nimport Item from '@/components/blog/item'\nimport Pagination from '@/components/pagination'\nimport { AppProps } from '@/types'\n\nconst TagIndex: React.FC<\n  PageProps<GatsbyTypes.CatPage> & AppProps['template']\n> = ({ data, pageContext }) => {\n  const catPosts = data.allMarkdownRemark.edges\n  const { catId, isFirst, isLast, currentPage, catPages } = pageContext\n\n  if (catPosts.length === 0) {\n    return (\n      <Layout title={`カテゴリー：${catId}`}>\n        <Seo title={`カテゴリー：${catId}`} />\n        <p>No posts...</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout title={`カテゴリー: ${catId}`}>\n      <Seo title={`カテゴリー: ${catId}`} />\n      <section className=\"section blog\">\n        <div className=\"text-center\">\n          <h1 className=\"pb-4 mb-10 section__ttl\">{`カテゴリー: ${catId}`}</h1>\n        </div>\n        <ul className=\"blog-list\">\n          {catPosts.map(({ node }) => (\n            <li key={node.fields.slug}>\n              <article itemScope itemType=\"http://schema.org/Article\">\n                <figure className=\"overflow-hidden rounded relative blog-list__imgwrap\">\n                  <Link\n                    to={`/blog${node.fields.slug!}`}\n                    className=\"block transition-transform duration-700 ease-out\"\n                    itemProp=\"url\"\n                  >\n                    <Image\n                      fluid={node.frontmatter.hero.childImageSharp.fluid!}\n                      alt=\"\"\n                    />\n                  </Link>\n                  <p className=\"blog-list__date\">{node.frontmatter.date}</p>\n                </figure>\n                <h2 className=\"blog-list__ttl\">\n                  <Link\n                    to={`/blog${node.fields.slug!}`}\n                    itemProp=\"url\"\n                    className=\"block hover:opacity-60 transition-opacity\"\n                  >\n                    <span itemProp=\"headline\">{node.frontmatter.title}</span>\n                  </Link>\n                </h2>\n                <div className=\"mt-2 flex flex-wrap gap-1\">\n                  {node.frontmatter.tags &&\n                    node.frontmatter.tags.map((cat, index) => (\n                      <Link\n                        className=\"text-xs md:text-sm post-tag\"\n                        to={`/cat/${cat}`}\n                        key={index}\n                      >\n                        {cat}\n                      </Link>\n                    ))}\n                </div>\n              </article>\n            </li>\n          ))}\n        </ul>\n        <div className=\"max-w-screen-sm mx-auto py-12\">\n          <Pagination\n            isFirst={isFirst!}\n            isLast={isLast!}\n            currentPage={currentPage!}\n            type={`tag`}\n            pages={catPages!}\n          />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default TagIndex\n\nexport const pageQuery = graphql`\n  query CatPage($limit: Int!, $skip: Int!, $catId: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { category: { in: [$catId] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n            description\n            hero {\n              childImageSharp {\n                fluid(maxWidth: 900) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}