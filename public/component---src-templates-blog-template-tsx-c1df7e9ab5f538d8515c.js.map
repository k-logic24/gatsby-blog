{"version":3,"sources":["webpack:///./src/components/item.tsx","webpack:///./src/templates/blog-template.tsx"],"names":["Item","title","date","slug","src","itemScope","itemType","className","to","itemProp","fluid","alt","BlogIndex","data","pageContext","posts","allMarkdownRemark","nodes","length","map","post","frontmatter","fields","key","hero","childImageSharp","isFirst","currentPage","rel","icon","faChevronLeft","style","marginLeft","isLast","marginRight","faChevronRight"],"mappings":"2FAAA,0DAkCeA,IA5B0B,SAAC,GAA+B,IAA7BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAC7D,OACE,4BACE,6BAASC,WAAS,EAACC,SAAS,6BAC1B,4BAAQC,UAAU,sCAChB,kBAAC,OAAD,CACEC,GAAIL,EACJI,UAAU,mDACVE,SAAS,OAET,kBAAC,IAAD,CAAOC,MAAON,EAAMO,IAAI,OAG5B,wBAAIJ,UAAU,kBACZ,kBAAC,OAAD,CACEC,GAAIL,EACJM,SAAS,MACTF,UAAU,6CAEV,0BAAME,SAAS,YAAYR,KAG/B,0BAAMM,UAAU,0BAA0BL,O,kCC5BlD,wGAoFeU,UAlEX,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACLC,EAAQF,EAAKG,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,kBAAC,IAAD,CAAQjB,MAAM,QACZ,kBAAC,IAAD,CAAKA,MAAM,SACX,2CAMJ,kBAAC,IAAD,CAAQA,MAAM,QACZ,kBAAC,IAAD,CAAKA,MAAM,SACX,6BAASM,UAAU,gBACjB,yBAAKA,UAAU,eACb,wBAAIA,UAAU,2BAAd,cAEF,wBAAIA,UAAU,aACXQ,EAAMI,KAAI,SAAAC,GAAQ,gBACXnB,GAAQ,UAAAmB,EAAKC,mBAAL,eAAkBpB,SAAlB,UAA2BmB,EAAKE,cAAhC,aAA2B,EAAanB,MAEtD,OACE,kBAAC,IAAD,CACEoB,IAAKH,EAAKE,OAAQnB,KAClBF,MAAOA,EACPG,IAAKgB,SAAF,UAAEA,EAAMC,mBAAR,iBAAE,EAAmBG,YAArB,iBAAE,EAAyBC,uBAA3B,aAAE,EAA0Cf,MAC/CP,KAAI,UAAEiB,EAAKE,cAAP,aAAE,EAAanB,KACnBD,KAAMkB,EAAKC,YAAanB,WAKhC,yBAAKK,UAAU,YACb,wBAAIA,UAAU,kBACVO,EAAYY,SACZ,wBAAInB,UAAU,QACZ,kBAAC,OAAD,CACEC,GAC8B,IAA5BM,EAAYa,YAAZ,mBAEab,EAAYa,YAAe,GAE1CC,IAAI,QAEJ,kBAAC,IAAD,CAAiBC,KAAMC,MACvB,0BAAMC,MAAO,CAAEC,WAAY,UAA3B,WAIJlB,EAAYmB,QACZ,wBAAI1B,UAAU,QACZ,kBAAC,OAAD,CAAMC,GAAE,UAAWM,EAAYa,YAAe,GAAtC,IAA4CC,IAAI,QACtD,0BAAMG,MAAO,CAAEG,YAAa,UAA5B,QACA,kBAAC,IAAD,CAAiBL,KAAMM","file":"component---src-templates-blog-template-tsx-c1df7e9ab5f538d8515c.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { AppProps } from '@/types'\n\nconst Item: React.FC<AppProps['item']> = ({ title, date, slug, src }) => {\n  return (\n    <li>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <figure className=\"overflow-hidden blog-list__imgwrap\">\n          <Link\n            to={slug!}\n            className=\"block transition-transform duration-700 ease-out\"\n            itemProp=\"url\"\n          >\n            <Image fluid={src!} alt=\"\" />\n          </Link>\n        </figure>\n        <h2 className=\"blog-list__ttl\">\n          <Link\n            to={slug!}\n            itemProp=\"url\"\n            className=\"block hover:opacity-60 transition-opacity\"\n          >\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n        <span className=\"text-xs text-secondary\">{date}</span>\n      </article>\n    </li>\n  )\n}\n\nexport default Item\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\nimport Image from 'gatsby-image'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport Bio from '@/components/bio'\nimport Layout from '@/layouts/default'\nimport Seo from '@/components/seo'\nimport Item from '@/components/item'\n\nconst BlogIndex: React.FC<\n  PageProps<GatsbyTypes.BlogPageQuery> & {\n    pageContext: GatsbyTypes.SitePageContext\n  }\n> = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout title=\"BLOG\">\n        <Seo title=\"BLOG\" />\n        <p>No posts...</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout title=\"BLOG\">\n      <Seo title=\"BLOG\" />\n      <section className=\"section blog\">\n        <div className=\"text-center\">\n          <h1 className=\"pb-4 mb-10 section__ttl\">All Posts</h1>\n        </div>\n        <ul className=\"blog-list\">\n          {posts.map(post => {\n            const title = post.frontmatter?.title || post.fields?.slug\n\n            return (\n              <Item\n                key={post.fields!.slug!}\n                title={title}\n                src={post?.frontmatter?.hero?.childImageSharp?.fluid}\n                slug={post.fields?.slug}\n                date={post.frontmatter!.date}\n              />\n            )\n          })}\n        </ul>\n        <nav className=\"paginate\">\n          <ul className=\"paginate-list\">\n            {!pageContext.isFirst && (\n              <li className=\"prev\">\n                <Link\n                  to={\n                    pageContext.currentPage === 2\n                      ? `/blog/`\n                      : `/blog/${pageContext.currentPage! - 1}`\n                  }\n                  rel=\"prev\"\n                >\n                  <FontAwesomeIcon icon={faChevronLeft} />\n                  <span style={{ marginLeft: '0.5em' }}>Prev</span>\n                </Link>\n              </li>\n            )}\n            {!pageContext.isLast && (\n              <li className=\"next\">\n                <Link to={`/blog/${pageContext.currentPage! + 1}/`} rel=\"next\">\n                  <span style={{ marginRight: '0.5em' }}>Next</span>\n                  <FontAwesomeIcon icon={faChevronRight} />\n                </Link>\n              </li>\n            )}\n          </ul>\n        </nav>\n      </section>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogPage($limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          hero {\n            childImageSharp {\n              fluid(maxWidth: 900) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}