{"version":3,"sources":["webpack:///./src/components/search.tsx","webpack:///./src/components/tag.tsx","webpack:///./src/utils/image.tsx","webpack:///./src/components/cat.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/blog/item.tsx"],"names":["Search","useState","searchData","setSearchData","nodes","useStaticQuery","allMarkdownRemark","className","type","placeholder","onInput","event","target","HTMLInputElement","keyword","value","toLowerCase","data","filter","node","frontmatter","title","fields","slug","indexOf","handleInputSearch","length","map","x","key","date","to","Tag","tagGroup","group","fieldValue","totalCount","Img","assetUrl","alt","allImageSharp","fluid","find","n","originalName","Cat","catGroup","BlogIndex","posts","post","src","hero","childImageSharp","tags","Item","itemScope","itemType","itemProp","tag","index"],"mappings":"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","file":"component---src-pages-index-tsx-9fb26b04edc8ffc1a154.js","sourcesContent":["import React, { useState } from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\n\nconst Search: React.FC = () => {\n  const [searchData, setSearchData] = useState<\n    GatsbyTypes.SearchQuery['allMarkdownRemark']['nodes']\n  >([])\n  const data = useStaticQuery<GatsbyTypes.SearchQuery>(graphql`\n    query Search {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: ASC }) {\n        nodes {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY.MM.DD\")\n            title\n          }\n        }\n      }\n    }\n  `)\n  const nodes = data.allMarkdownRemark.nodes\n  const handleInputSearch = (target: EventTarget) => {\n    if (target instanceof HTMLInputElement) {\n      const keyword = target.value.toLowerCase()\n      if (keyword) {\n        const data = nodes.filter(node => {\n          const target = `\n            ${node.frontmatter?.title?.toLowerCase()}\n            ${node.fields?.slug?.toLowerCase()}\n          `\n          return target.indexOf(keyword) !== -1\n        })\n        setSearchData(data)\n        return\n      }\n      setSearchData([])\n    }\n  }\n\n  return (\n    <div className=\"search\">\n      <div className=\"text-center pb-2 md:py-4 search-wrap\">\n        <input\n          className=\"search__input\"\n          type=\"text\"\n          placeholder=\"keyword\"\n          onInput={event => handleInputSearch(event.target)}\n        />\n      </div>\n      <p className=\"text-sm text-center mb-4\">{searchData.length}件ヒット！</p>\n      <ul className=\"max-w-screen-sm mx-auto search-list\">\n        {searchData.map(x => (\n          <li key={x.fields?.slug}>\n            <dl>\n              <div className=\"flex items-center text-sm md:text-base\">\n                <dt className=\"mr-4 text-sm whitespace-nowrap\">\n                  {x.frontmatter?.date}\n                </dt>\n                <Link\n                  className=\"hover:text-accent transition-colors flex-1 font-bold underline\"\n                  to={`/blog${x.fields?.slug!}`}\n                >\n                  <dd>{x.frontmatter?.title}</dd>\n                </Link>\n              </div>\n            </dl>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Search\n","import React, { useEffect, useState } from 'react'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\n\nconst Tag = () => {\n  const data = useStaticQuery<GatsbyTypes.TagQuery>(graphql`\n    query Tag {\n      allMarkdownRemark {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n  const tagGroup = data.allMarkdownRemark.group\n\n  return (\n    <ul className=\"tag-list\">\n      {tagGroup.map(({ fieldValue, totalCount }) => (\n        <li key={fieldValue}>\n          <Link\n            className=\"text-sm md:text-base font-bold post-tag\"\n            to={`/tag/${fieldValue}`}\n          >\n            {fieldValue}\n            <span className=\"inline-block ml-2\">({totalCount})</span>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Tag\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\ninterface ImgProps {\n  assetUrl: string\n  alt: string\n}\n\nconst Img: React.FC<ImgProps> = ({ assetUrl, alt }) => {\n  const { allImageSharp } = useStaticQuery<GatsbyTypes.ImgQuery>(graphql`\n    query Img {\n      allImageSharp {\n        nodes {\n          fluid(maxWidth: 1600) {\n            originalName\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Image\n      fluid={\n        allImageSharp.nodes.find(n => n.fluid?.originalName === assetUrl)\n          ?.fluid!\n      }\n      alt={alt}\n    />\n  )\n}\n\nexport default Img\n","import React, { useEffect, useState } from 'react'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\n\nimport Img from '@/utils/image'\n\nconst Cat = () => {\n  const data = useStaticQuery<GatsbyTypes.CatQuery>(graphql`\n    query Cat {\n      allMarkdownRemark {\n        group(field: frontmatter___category) {\n          fieldValue\n        }\n      }\n    }\n  `)\n  const catGroup = data.allMarkdownRemark.group\n\n  return (\n    <ul className=\"cat-list\">\n      {catGroup.map(({ fieldValue }) => (\n        <li key={fieldValue}>\n          <Link className=\"cat-list__link\" to={`/cat/${fieldValue}`}>\n            <figure className=\"cat-list__imgwrap\">\n              <Img assetUrl={`cat-${fieldValue}.jpg`} alt={``} />\n            </figure>\n            <p className=\"cat-list__txt\">{fieldValue}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Cat\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport Layout from '@/layouts/default'\nimport Item from '@/components/blog/item'\nimport Seo from '@/components/seo'\nimport Search from '@/components/search'\nimport Tag from '@/components/tag'\nimport Cat from '@/components/cat'\n\nconst BlogIndex: React.FC<PageProps<GatsbyTypes.BlogIndexQuery>> = ({\n  data,\n}) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout title=\"Hi!Dear\">\n      <Seo title=\"Home\" />\n      <div className=\"section home\">\n        <div className=\"section-wrap\">\n          <div className=\"text-center\">\n            <h1 className=\"pb-4 mb-10 section__ttl\">最新の記事</h1>\n          </div>\n          {posts.length ? (\n            <>\n              <ul className=\"blog-list\">\n                {posts.map(post => (\n                  <Item\n                    key={post.fields!.slug!}\n                    title={post.frontmatter?.title || post.fields?.slug}\n                    src={post?.frontmatter?.hero?.childImageSharp?.fluid}\n                    slug={post.fields?.slug}\n                    date={post.frontmatter?.date}\n                    // TODO\n                    tags={post.frontmatter?.tags as any}\n                  />\n                ))}\n              </ul>\n              <div className=\"pt-8 text-center\">\n                <Link className=\"link link--more\" to=\"/blog\">\n                  もっとみる\n                </Link>\n              </div>\n            </>\n          ) : (\n            <p>no posts...</p>\n          )}\n        </div>\n        <div className=\"section-wrap\">\n          <div className=\"text-center\">\n            <h1 className=\"pb-4 mb-10 section__ttl\">検索</h1>\n          </div>\n          <Search />\n        </div>\n        <div className=\"section-wrap\">\n          <div className=\"max-w-screen-md mx-auto px-4 py-8 bg-gray-tag dark:bg-white rounded-lg\">\n            <div className=\"text-center\">\n              <h1 className=\"pb-4 mb-10 text-gray section__ttl\">タグ</h1>\n            </div>\n            <Tag />\n          </div>\n        </div>\n        <div className=\"section-wrap\">\n          <div className=\"text-center\">\n            <h1 className=\"pb-4 mb-10 section__ttl\">カテゴリー</h1>\n          </div>\n          <Cat />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogIndex {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 6\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY.MM.DD\")\n          title\n          description\n          hero {\n            childImageSharp {\n              fluid(maxWidth: 900) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n          tags\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { AppProps } from '@/types'\n\nconst Item: React.FC<AppProps['item']> = ({ title, date, slug, src, tags }) => {\n  return (\n    <li>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <figure className=\"overflow-hidden rounded relative blog-list__imgwrap\">\n          <Link\n            to={`/blog${slug!}`}\n            className=\"block transition-transform duration-700 ease-out\"\n            itemProp=\"url\"\n          >\n            <Image fluid={src!} alt=\"\" />\n          </Link>\n          <p className=\"blog-list__date\">{date}</p>\n        </figure>\n        <h2 className=\"blog-list__ttl\">\n          <Link\n            to={`/blog${slug!}`}\n            itemProp=\"url\"\n            className=\"block hover:opacity-60 transition-opacity\"\n          >\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n        <div className=\"mt-2 flex flex-wrap gap-1\">\n          {tags &&\n            tags.map((tag, index) => (\n              <Link\n                className=\"text-xs md:text-sm post-tag\"\n                to={`/tag/${tag}`}\n                key={index}\n              >\n                {tag}\n              </Link>\n            ))}\n        </div>\n      </article>\n    </li>\n  )\n}\n\nexport default Item\n"],"sourceRoot":""}