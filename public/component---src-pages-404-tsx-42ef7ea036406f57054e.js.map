{"version":3,"sources":["webpack:///./node_modules/clsx/dist/clsx.m.js","webpack:///./src/components/atoms/tag-label.tsx","webpack:///./src/components/organisms/search.tsx","webpack:///./src/components/organisms/tag.tsx","webpack:///./src/components/shared/image.tsx","webpack:///./src/components/organisms/cat.tsx","webpack:///./src/components/pages/Top/Main.tsx","webpack:///./src/components/molecules/bio.tsx","webpack:///./src/components/organisms/footer.tsx","webpack:///./src/pages/404.tsx","webpack:///./src/components/molecules/item.tsx"],"names":["toVal","mix","k","y","str","Array","isArray","length","TagLabel","fieldValue","totalCount","variant","size","tmp","x","i","arguments","clsx","className","to","Search","useState","searchData","setSearchData","nodes","useStaticQuery","allMarkdownRemark","type","placeholder","onInput","event","target","HTMLInputElement","keyword","value","toLowerCase","data","filter","node","frontmatter","title","fields","slug","indexOf","handleInputSearch","map","key","itemProp","content","date","Tag","tagGroup","Img","assetUrl","alt","allImageSharp","fluid","find","n","originalName","Cat","catGroup","Main","posts","setPosts","setTagGroup","setCatGroup","useEffect","isText","slice","post","id","src","hero","childImageSharp","tags","Bio","author","site","siteMetadata","social","avatar","fixed","name","imgStyle","borderRadius","href","twitter","rel","github","Footer","Date","getFullYear","BlogIndex","Item","itemScope","itemType","tag","index"],"mappings":"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","file":"component---src-pages-404-tsx-42ef7ea036406f57054e.js","sourcesContent":["function toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (typeof mix === 'string' || typeof mix === 'number') {\n    str += mix;\n  } else if (typeof mix === 'object') {\n    if (Array.isArray(mix)) {\n      for (k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n          if (y = toVal(mix[k])) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else {\n      for (k in mix) {\n        if (mix[k]) {\n          str && (str += ' ');\n          str += k;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\nexport default function () {\n  var i = 0,\n      tmp,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (tmp = arguments[i++]) {\n      if (x = toVal(tmp)) {\n        str && (str += ' ');\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}","import React from 'react'\nimport { Link } from 'gatsby'\nimport clsx from 'clsx'\n\nimport { AppProps } from '@/types'\n\nconst TagLabel: React.FC<AppProps['taglabel']> = ({ fieldValue, totalCount, variant }) => {\n  const size = clsx('post-tag', variant === 'sm' && 'post-tag--sm', variant === 'lg' && 'post-tag--lg')\n\n  return (\n    <Link\n      className={size}\n      to={`/tag/${fieldValue}`}\n    >\n      {fieldValue}\n      {totalCount && <span className=\"inline-block ml-2\">({totalCount})</span>}\n    </Link>\n  )\n}\n\nexport default TagLabel\n","import React, { useState } from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\n\nconst Search: React.FC = () => {\n  const [searchData, setSearchData] = useState<\n    GatsbyTypes.SearchQuery['allMarkdownRemark']['nodes']\n  >([])\n  const data = useStaticQuery<GatsbyTypes.SearchQuery>(graphql`\n    query Search {\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        nodes {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n          }\n        }\n      }\n    }\n  `)\n  const nodes = data.allMarkdownRemark.nodes\n  const handleInputSearch = (target: EventTarget) => {\n    if (target instanceof HTMLInputElement) {\n      const keyword = target.value.toLowerCase()\n      if (keyword) {\n        const data = nodes.filter(node => {\n          const target = `\n          ${node.frontmatter?.title?.toLowerCase()}\n          ${node.fields?.slug?.toLowerCase()}\n        `\n          return target.indexOf(keyword) !== -1\n        })\n        setSearchData(data)\n        return\n      }\n      setSearchData([])\n    }\n  }\n\n  return (\n    <div className=\"search\">\n      <div className=\"text-center pb-2 md:py-4 search-wrap\">\n        <input\n          className=\"search__input\"\n          type=\"text\"\n          placeholder=\"keyword\"\n          onInput={event => handleInputSearch(event.target)}\n        />\n      </div>\n      <p className=\"text-sm text-center mb-4\">{searchData.length}件ヒット！</p>\n      <ul className=\"max-w-screen-sm mx-auto search-list\">\n        {searchData.map(x => (\n          <li key={x.fields?.slug}>\n            <dl>\n              <div className=\"flex items-center text-sm md:text-base\">\n                <dt className=\"mr-4 text-sm whitespace-nowrap\">\n                  <span itemProp=\"datePublished\" content={x.frontmatter?.date}>\n                    {x.frontmatter?.date}\n                  </span>\n                </dt>\n                <Link\n                  className=\"hover:text-accent transition-colors flex-1 font-bold underline\"\n                  to={`/blog${x.fields?.slug}`}\n                >\n                  <dd>{x.frontmatter?.title}</dd>\n                </Link>\n              </div>\n            </dl>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nimport TagLabel from '@/components/atoms/tag-label'\nimport { BlogTagGroupProps } from '@/types'\n\nconst Tag: React.FC<{ tagGroup: BlogTagGroupProps }> = ({ tagGroup }) => {\n  return (\n    <div className=\"max-w-screen-md mx-auto px-4 py-8 bg-gray-tag dark:bg-white rounded-lg\">\n      <div className=\"text-center\">\n        <h1 className=\"pb-4 mb-10 text-gray section__ttl\">タグ</h1>\n      </div>\n      <ul className=\"tag-list\">\n        {tagGroup.map(({ fieldValue, totalCount }) => (\n          <li key={fieldValue}>\n            <TagLabel fieldValue={fieldValue!} totalCount={totalCount} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Tag\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\ninterface ImgProps {\n  assetUrl: string\n  alt: string\n}\n\nconst Img: React.FC<ImgProps> = ({ assetUrl, alt }) => {\n  const { allImageSharp } = useStaticQuery<GatsbyTypes.ImgQuery>(graphql`\n    query Img {\n      allImageSharp {\n        nodes {\n          fluid(maxWidth: 1600) {\n            originalName\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Image\n      fluid={\n        allImageSharp.nodes.find(n => n.fluid?.originalName === assetUrl)?.fluid\n      }\n      alt={alt}\n    />\n  )\n}\n\nexport default Img\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Img from '@/components/shared/image'\nimport { BlogCatGroupProps } from '@/types'\n\nconst Cat: React.FC<{ catGroup: BlogCatGroupProps }> = ({ catGroup }) => {\n  return (\n    <section className=\"text-center\">\n      <h1 className=\"pb-4 mb-10 section__ttl\">カテゴリー</h1>\n      <ul className=\"cat-list\">\n        {catGroup.map(({ fieldValue }) => (\n          <li key={fieldValue}>\n            <Link className=\"cat-list__link\" to={`/cat/${fieldValue}`}>\n              <figure className=\"cat-list__imgwrap\">\n                <Img assetUrl={`cat-${fieldValue}.jpg`} alt={``} />\n              </figure>\n              <p className=\"cat-list__txt\">{fieldValue}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Cat\n","import React, { useEffect, useState } from 'react'\nimport { Link } from 'gatsby'\n\nimport Header from '@/components/organisms/header'\nimport Footer from '@/components/organisms/footer'\nimport Fv from '@/components/organisms/fv'\nimport Seo from '@/components/shared/seo'\nimport Item from '@/components/molecules/item'\nimport Search from '@/components/organisms/search'\nimport Tag from '@/components/organisms/tag'\nimport Cat from '@/components/organisms/cat'\nimport { BlogIndexProps, BlogTagGroupProps, BlogCatGroupProps } from '@/types'\n\ntype PostProps = BlogIndexProps['data']['allMarkdownRemark']['nodes']\n\nconst Main: React.FC<BlogIndexProps> = ({ title, data }) => {\n  const [posts, setPosts] = useState<PostProps>([])\n  const [tagGroup, setTagGroup] = useState<BlogTagGroupProps | []>([])\n  const [catGroup, setCatGroup] = useState<BlogCatGroupProps | []>([])\n\n  useEffect(() => {\n    const { nodes, tagGroup, catGroup } = data.allMarkdownRemark\n    setPosts(nodes)\n    setTagGroup(tagGroup)\n    setCatGroup(catGroup)\n  }, [])\n\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <Fv title={title} isText={true} />\n      <main className=\"py-8 md:py-12 px-4 mx-auto max-w-screen-lg\">\n        <Seo title=\"Home\" />\n        <div className=\"section home\">\n          <div className=\"section-wrap\">\n            <div className=\"text-center\">\n              <h1 className=\"pb-4 mb-10 section__ttl\">最新の記事</h1>\n            </div>\n            {posts.length ? (\n              <>\n                <ul className=\"blog-list\">\n                  {posts.slice(0, 6).map(post => (\n                    <Item\n                      key={post.id}\n                      title={post.frontmatter?.title || post.fields?.slug}\n                      src={post?.frontmatter?.hero?.childImageSharp?.fluid}\n                      slug={post.fields?.slug}\n                      date={post.frontmatter?.date}\n                      tags={post.frontmatter?.tags}\n                      variant={'sm'}\n                    />\n                  ))}\n                </ul>\n                <div className=\"pt-8 text-center\">\n                  <Link className=\"link link--more\" to=\"/blog\">\n                    もっとみる\n                  </Link>\n                </div>\n              </>\n            ) : (\n              <p>no posts...</p>\n            )}\n          </div>\n          <div className=\"section-wrap\">\n            <div className=\"text-center\">\n              <h1 className=\"pb-4 mb-10 section__ttl\">検索</h1>\n            </div>\n            <Search />\n          </div>\n          <div className=\"section-wrap\">\n            <Tag tagGroup={tagGroup} />\n          </div>\n          <div className=\"section-wrap\">\n            <Cat catGroup={catGroup} />\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nconst Bio: React.FC = () => {\n  const data = useStaticQuery<GatsbyTypes.BioQuery>(graphql`\n    query Bio {\n      avatar: file(absolutePath: { regex: \"/avater.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50, quality: 95) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n            github\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site?.siteMetadata?.author\n  const social = data.site?.siteMetadata?.social\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div className=\"flex\">\n      {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <ul className=\"bio-list\">\n          <li>\n            <a\n              className=\"bio-list__link anim-link\"\n              href={`https://twitter.com/${social?.twitter || ``}`}\n              target=\"_blank\"\n              rel=\"noopenner noreferrer\"\n            >\n              Twitter\n            </a>\n          </li>\n          <li>\n            <a\n              className=\"bio-list__link anim-link\"\n              href={`https://github.com/${social?.github || ``}`}\n              target=\"_blank\"\n              rel=\"noopenner noreferrer\"\n            >\n              GitHub\n            </a>\n          </li>\n        </ul>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\n\nimport Bio from '@/components/molecules/bio'\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"bg-gray-light\">\n      <div className=\"py-4 flex justify-between container\">\n        <Bio />\n        <small className=\"self-end text-white\">\n          &copy; {new Date().getFullYear()} K.Iwata\n        </small>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { graphql, PageProps } from 'gatsby'\n\nimport Main from '@/components/pages/Top/Main'\n\nconst BlogIndex: React.FC<PageProps<GatsbyTypes.BlogIndexQuery>> = ({\n  data,\n}) => {\n  return <Main title=\"404 Not Found\" data={data} />\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query ErrorPage {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      catGroup: group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n      tagGroup: group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport TagLabel from '@/components/atoms/tag-label'\nimport { AppProps } from '@/types'\n\nconst Item: React.FC<AppProps['item']> = ({ title, date, slug, src, tags, variant}) => {\n  return (\n    <li key={slug}>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <figure className=\"overflow-hidden rounded relative blog-list__imgwrap\">\n          <Link\n            to={`/blog${slug!}`}\n            className=\"block transition-transform duration-700 ease-out\"\n            itemProp=\"url\"\n          >\n            <Image fluid={src!} alt=\"\" />\n          </Link>\n          <p className=\"blog-list__date\">\n            <span itemProp=\"datePublished\" content={date}>\n              {date}\n            </span>\n          </p>\n        </figure>\n        <h2 className=\"blog-list__ttl\">\n          <Link\n            to={`/blog${slug!}`}\n            itemProp=\"url\"\n            className=\"block hover:opacity-60 transition-opacity\"\n          >\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n        <div className=\"mt-1\">\n          <ul className=\"blog-list-taglist\">\n            {tags &&\n              tags.map((tag, index) => (\n                <li key={index}>\n                  <TagLabel fieldValue={tag} variant={variant} />\n                </li>\n              ))}\n          </ul>\n        </div>\n      </article>\n    </li>\n  )\n}\n\nexport default Item\n"],"sourceRoot":""}