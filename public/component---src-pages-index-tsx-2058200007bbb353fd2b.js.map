{"version":3,"sources":["webpack:///./src/components/search.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/item.tsx"],"names":["Search","useState","searchData","setSearchData","nodes","useStaticQuery","allMarkdownRemark","className","type","placeholder","onInput","event","target","keyword","value","toLowerCase","data","filter","node","frontmatter","title","fields","slug","indexOf","handleInputSearch","map","x","key","date","to","BlogIndex","posts","length","post","src","hero","childImageSharp","fluid","Item","itemScope","itemType","itemProp","alt"],"mappings":"2KAiEeA,EA9DU,WAAM,MACOC,mBAElC,IAFKC,EADsB,KACVC,EADU,KAmBvBC,EAfOC,yBAAc,cAeRC,kBAAkBF,MAiBrC,OACE,yBAAKG,UAAU,UACb,yBAAKA,UAAU,gCACb,2BACEA,UAAU,gBACVC,KAAK,OACLC,YAAY,UACZC,QAAS,SAAAC,GAAK,OAvBI,SAACC,GACzB,IAAMC,EAAUD,EAAOE,MAAMC,cAC7B,GAAIF,EAAJ,CACE,IAAMG,EAAOZ,EAAMa,QAAO,SAAAC,GAAQ,YAKhC,OAAoC,KAJrB,gBAAH,UACRA,EAAKC,mBADG,iBACR,EAAkBC,aADV,aACR,EAAyBL,eADjB,0BAERG,EAAKG,cAFG,iBAER,EAAaC,YAFL,aAER,EAAmBP,eAFX,cAIEQ,QAAQV,MAExBV,EAAca,QAGhBb,EAAc,IAUUqB,CAAkBb,EAAMC,YAG9C,wBAAIL,UAAU,eACXL,EAAWuB,KAAI,SAAAC,GAAC,iBACf,wBAAIC,IAAKD,EAAEP,YAAYG,MACrB,yBAAKf,UAAU,QACb,wCAAOmB,EAAEP,mBAAT,aAAO,EAAeS,MACtB,2BACE,kBAAC,OAAD,CAAMC,GAAE,UAAEH,EAAEL,cAAJ,aAAE,EAAUC,MAApB,UAA4BI,EAAEP,mBAA9B,aAA4B,EAAeC,gBCC5CU,UA/CoD,SAAC,GAE9D,IACEC,EADF,EADJf,KAEmBV,kBAAkBF,MAErC,OACE,kBAAC,IAAD,CAAQgB,MAAM,WACZ,kBAAC,IAAD,CAAKA,MAAM,SACX,yBAAKb,UAAU,gBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,2BAAd,WAEDwB,EAAMC,OACL,oCACE,wBAAIzB,UAAU,aACXwB,EAAMN,KAAI,SAAAQ,GAAI,uBACb,kBAAC,IAAD,CACEN,IAAKM,EAAKZ,OAAQC,KAClBF,OAAO,UAAAa,EAAKd,mBAAL,eAAkBC,SAAlB,UAA2Ba,EAAKZ,cAAhC,aAA2B,EAAaC,MAC/CY,IAAKD,SAAF,UAAEA,EAAMd,mBAAR,iBAAE,EAAmBgB,YAArB,iBAAE,EAAyBC,uBAA3B,aAAE,EAA0CC,MAC/Cf,KAAI,UAAEW,EAAKZ,cAAP,aAAE,EAAaC,KACnBM,KAAMK,EAAKd,YAAaS,WAI9B,yBAAKrB,UAAU,oBACb,kBAAC,OAAD,CAAMA,UAAU,kBAAkBsB,GAAG,SAArC,WAMJ,2CAGJ,yBAAKtB,UAAU,gBACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,2BAAd,WAEF,kBAAC,EAAD,W,kCCjDV,0DAkCe+B,IA5B0B,SAAC,GAA+B,IAA7BlB,EAA6B,EAA7BA,MAAOQ,EAAsB,EAAtBA,KAAMN,EAAgB,EAAhBA,KAAMY,EAAU,EAAVA,IAC7D,OACE,4BACE,6BAASK,WAAS,EAACC,SAAS,6BAC1B,4BAAQjC,UAAU,sCAChB,kBAAC,OAAD,CACEsB,GAAIP,EACJf,UAAU,mDACVkC,SAAS,OAET,kBAAC,IAAD,CAAOJ,MAAOH,EAAMQ,IAAI,OAG5B,wBAAInC,UAAU,kBACZ,kBAAC,OAAD,CACEsB,GAAIP,EACJmB,SAAS,MACTlC,UAAU,6CAEV,0BAAMkC,SAAS,YAAYrB,KAG/B,0BAAMb,UAAU,0BAA0BqB","file":"component---src-pages-index-tsx-2058200007bbb353fd2b.js","sourcesContent":["import React, { useState } from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\n\nconst Search: React.FC = () => {\n  const [searchData, setSearchData] = useState<\n    GatsbyTypes.SearchQuery['allMarkdownRemark']['nodes']\n  >([])\n  const data = useStaticQuery<GatsbyTypes.SearchQuery>(graphql`\n    query Search {\n      allMarkdownRemark {\n        nodes {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  `)\n  const nodes = data.allMarkdownRemark.nodes\n  const handleInputSearch = (target: HTMLInputElement) => {\n    const keyword = target.value.toLowerCase()\n    if (keyword) {\n      const data = nodes.filter(node => {\n        const target = `\n          ${node.frontmatter?.title?.toLowerCase()}\n          ${node.fields?.slug?.toLowerCase()}\n        `\n        return target.indexOf(keyword) !== -1\n      })\n      setSearchData(data)\n      return\n    }\n    setSearchData([])\n  }\n\n  return (\n    <div className=\"search\">\n      <div className=\"text-center py-4 search-wrap\">\n        <input\n          className=\"search__input\"\n          type=\"text\"\n          placeholder=\"keyword\"\n          onInput={event => handleInputSearch(event.target as HTMLInputElement)}\n        />\n      </div>\n      <ul className=\"search-list\">\n        {searchData.map(x => (\n          <li key={x.frontmatter.slug}>\n            <div className=\"flex\">\n              <span>{x.frontmatter?.date}</span>\n              <p>\n                <Link to={x.fields?.slug!}>{x.frontmatter?.title}</Link>\n              </p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport Layout from '@/layouts/default'\nimport Item from '@/components/item'\nimport Seo from '@/components/seo'\nimport Search from '@/components/search'\n\nconst BlogIndex: React.FC<PageProps<GatsbyTypes.BlogIndexQuery>> = ({\n  data,\n}) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout title=\"Hi!Dear\">\n      <Seo title=\"Home\" />\n      <div className=\"section home\">\n        <div className=\"section-wrap\">\n          <div className=\"text-center\">\n            <h1 className=\"pb-4 mb-10 section__ttl\">Latest</h1>\n          </div>\n          {posts.length ? (\n            <>\n              <ul className=\"blog-list\">\n                {posts.map(post => (\n                  <Item\n                    key={post.fields!.slug!}\n                    title={post.frontmatter?.title || post.fields?.slug}\n                    src={post?.frontmatter?.hero?.childImageSharp?.fluid}\n                    slug={post.fields?.slug}\n                    date={post.frontmatter!.date}\n                  />\n                ))}\n              </ul>\n              <div className=\"pt-8 text-center\">\n                <Link className=\"link link--more\" to=\"/blog\">\n                  もっとみる\n                </Link>\n              </div>\n            </>\n          ) : (\n            <p>no posts...</p>\n          )}\n        </div>\n        <div className=\"section-wrap\">\n          <div className=\"text-center\">\n            <h1 className=\"pb-4 mb-10 section__ttl\">Search</h1>\n          </div>\n          <Search />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query BlogIndex {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: ASC }\n      limit: 6\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          hero {\n            childImageSharp {\n              fluid(maxWidth: 900) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { AppProps } from '@/types'\n\nconst Item: React.FC<AppProps['item']> = ({ title, date, slug, src }) => {\n  return (\n    <li>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <figure className=\"overflow-hidden blog-list__imgwrap\">\n          <Link\n            to={slug!}\n            className=\"block transition-transform duration-700 ease-out\"\n            itemProp=\"url\"\n          >\n            <Image fluid={src!} alt=\"\" />\n          </Link>\n        </figure>\n        <h2 className=\"blog-list__ttl\">\n          <Link\n            to={slug!}\n            itemProp=\"url\"\n            className=\"block hover:opacity-60 transition-opacity\"\n          >\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n        <span className=\"text-xs text-secondary\">{date}</span>\n      </article>\n    </li>\n  )\n}\n\nexport default Item\n"],"sourceRoot":""}