{"version":3,"sources":["webpack:///./src/components/pagination.tsx","webpack:///./src/components/item.tsx","webpack:///./src/templates/cat-template.tsx"],"names":["Pagination","isFirst","isLast","currentPage","type","pages","className","to","rel","icon","faChevronLeft","style","marginLeft","marginRight","faChevronRight","Item","title","date","slug","src","tags","key","itemScope","itemType","itemProp","fluid","alt","content","map","tag","index","TagIndex","data","pageContext","catPosts","allMarkdownRemark","edges","catId","catPages","length","description","node","fields","frontmatter","hero","childImageSharp"],"mappings":"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","file":"component---src-templates-cat-template-tsx-648752832dc3f9c9e084.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { AppProps } from '@/types'\n\nconst Pagination: React.FC<AppProps['pagination']> = ({\n  isFirst,\n  isLast,\n  currentPage,\n  type,\n  pages,\n}) => {\n  return (\n    <nav className=\"pagination\">\n      <ul className=\"pagination-list\">\n        {!isFirst && (\n          <li className=\"pagination-list__item prev\">\n            <Link\n              className=\"pagination__link\"\n              to={\n                currentPage === 2 ? `/${type}/` : `/${type}/${currentPage! - 1}`\n              }\n              rel=\"prev\"\n            >\n              <FontAwesomeIcon\n                icon={faChevronLeft}\n                className=\"pagination__icon prev\"\n              />\n              <span style={{ marginLeft: '0.5em' }}>Prev</span>\n            </Link>\n          </li>\n        )}\n        <li className=\"page-txt\">\n          page {currentPage} / {pages}\n        </li>\n        {!isLast && (\n          <li className=\"pagination-list__item next\">\n            <Link\n              to={`/${type}/${currentPage! + 1}/`}\n              className=\"pagination__link\"\n              rel=\"next\"\n            >\n              <span style={{ marginRight: '0.5em' }}>Next</span>\n              <FontAwesomeIcon\n                icon={faChevronRight}\n                className=\"pagination__icon next\"\n              />\n            </Link>\n          </li>\n        )}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Pagination\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { AppProps } from '@/types'\n\nconst Item: React.FC<AppProps['item']> = ({ title, date, slug, src, tags }) => {\n  return (\n    <li key={slug}>\n      <article itemScope itemType=\"http://schema.org/Article\">\n        <figure className=\"overflow-hidden rounded relative blog-list__imgwrap\">\n          <Link\n            to={`/blog${slug!}`}\n            className=\"block transition-transform duration-700 ease-out\"\n            itemProp=\"url\"\n          >\n            <Image fluid={src!} alt=\"\" />\n          </Link>\n          <p className=\"blog-list__date\">\n            <span itemProp=\"datePublished\" content={date}>\n              {date}\n            </span>\n          </p>\n        </figure>\n        <h2 className=\"blog-list__ttl\">\n          <Link\n            to={`/blog${slug!}`}\n            itemProp=\"url\"\n            className=\"block hover:opacity-60 transition-opacity\"\n          >\n            <span itemProp=\"headline\">{title}</span>\n          </Link>\n        </h2>\n        <div className=\"mt-1\">\n          <ul className=\"blog-list-taglist\">\n            {tags &&\n              tags.map((tag, index) => (\n                <li key={index}>\n                  <Link\n                    className=\"text-xs md:text-sm post-tag\"\n                    to={`/tag/${tag}`}\n                  >\n                    {tag}\n                  </Link>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </article>\n    </li>\n  )\n}\n\nexport default Item\n","import React from 'react'\nimport { graphql, PageProps } from 'gatsby'\n\nimport Layout from '@/layouts/default'\nimport Seo from '@/components/seo'\nimport Item from '@/components/item'\nimport Pagination from '@/components/pagination'\nimport { AppProps } from '@/types'\n\nconst TagIndex: React.FC<\n  PageProps<GatsbyTypes.CatPage> & AppProps['template']\n> = ({ data, pageContext }) => {\n  const catPosts = data.allMarkdownRemark.edges\n  const { catId, isFirst, isLast, currentPage, catPages } = pageContext\n\n  if (catPosts.length === 0) {\n    return (\n      <Layout title={`${catId}`}>\n        <Seo title={`${catId}`} />\n        <p>No posts...</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout title={`Cat: ${catId}`}>\n      <Seo\n        title={`${catId}`}\n        description={`カテゴリー: ${catId}の一覧です。`}\n      />\n      <section className=\"section blog\">\n        <div className=\"text-center\">\n          <h1 className=\"pb-4 mb-10 section__ttl\">{`${catId}`}</h1>\n        </div>\n        <ul className=\"blog-list\">\n          {catPosts.map(({ node }) => (\n            <Item\n              key={node.fields.slug}\n              title={node.frontmatter.title}\n              src={node.frontmatter.hero.childImageSharp.fluid!}\n              slug={node.fields.slug}\n              date={node.frontmatter.date}\n              tags={node.frontmatter.tags}\n            />\n          ))}\n        </ul>\n        <div className=\"max-w-screen-sm mx-auto py-12\">\n          <Pagination\n            isFirst={isFirst!}\n            isLast={isLast!}\n            currentPage={currentPage!}\n            type={`cat/${catId}`}\n            pages={catPages!}\n          />\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default TagIndex\n\nexport const pageQuery = graphql`\n  query CatPage($limit: Int!, $skip: Int!, $catId: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { category: { in: [$catId] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n            hero {\n              childImageSharp {\n                fluid(maxWidth: 900) {\n                  ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}